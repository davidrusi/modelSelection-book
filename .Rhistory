library(mombf)
set.seed(1234)
x <- matrix(rnorm(100*3), nrow=100, ncol=3)
theta <- matrix(c(1,1,0), ncol=1)
y <- x %*% theta + rnorm(100)
head(y)
df <- data.frame(y, x)
head(df)
fit.bic <- bestBIC(y ~ x[,1] + x[,2] + x[,3], data=df)
print(fit.bic)
priorCoef <- momprior()
priorDelta <- modelbbprior()
fit.bms <- modelSelection(y ~ x[,1] + x[,2] + x[,3], data=df,
priorCoef=priorCoef,
priorDelta=priorDelta)
library(mombf)
set.seed(1234)
x <- matrix(rnorm(100*3), nrow=100, ncol=3)
theta <- matrix(c(1,1,0), ncol=1)
y <- x %*% theta + rnorm(100)
df <- data.frame(y, x)
fit.bic <- bestBIC(y ~ x[,1] + x[,2] + x[,3], data=df)
print(fit.bic)
fit.bic$models[1:5,]
summary(fit.bic)
coef(fit.bic)
priorCoef <- momprior()
priorDelta <- modelbbprior()
fit.bms <- modelSelection(y ~ x[,1] + x[,2] + x[,3], data=df,
priorCoef=priorCoef,
priorDelta=priorDelta)
coef(fit.bms)
postProb(fit.bms)[1:5,]
ypred <- predict(fit.bms)
head(ypred)
ybin <- y > 0
fit2.bic <- bestBIC(ybin ~ x[,1] + x[,2] + x[,3], family='binomial', data=df)
print(fit2.bic)
fit2.bms <- modelSelection(ybin ~ x[,1] + x[,2] + x[,3], data=df,
priorCoef=priorCoef,
priorDelta=priorDelta,
family='binomial')
coef(fit2.bms)
fit.gam <- modelSelection(y ~ x[,1] + x[,2] + x[,3], data=df,
smooth = ~ x[,1] + x[,2] + x[,3],
priorCoef=priorCoef,
priorDelta=priorDelta, verbose=FALSE)
head(df)
library(mombf)
set.seed(1234)
x <- matrix(rnorm(100*3), nrow=100, ncol=3)
theta <- matrix(c(1,1,0), ncol=1)
y <- x %*% theta + rnorm(100)
df <- data.frame(y, x)
fit.bic <- bestBIC(y ~ ., data=df)
library(mombf)
set.seed(1234)
x <- matrix(rnorm(100*3), nrow=100, ncol=3)
theta <- matrix(c(1,1,0), ncol=1)
y <- x %*% theta + rnorm(100)
df <- data.frame(y, x)
fit.bic <- bestBIC(y ~ ., data=df)
print(fit.bic)
fit.bic$models[1:5,]
summary(fit.bic)
coef(fit.bic)
priorCoef <- momprior()
priorDelta <- modelbbprior()
fit.bms <- modelSelection(y ~ x[,1] + x[,2] + x[,3], data=df,
priorCoef=priorCoef,
priorDelta=priorDelta)
dfbin <- transform(df, ybin = (y > 0)) |>
select(!y)
library(tidyverse)
dfbin <- transform(df, ybin = (y > 0)) |>
select(!y)
head(dfbin)
?select
?transform
library(mombf)
set.seed(1234)
x <- matrix(rnorm(100*3), nrow=100, ncol=3)
theta <- matrix(c(1,1,0), ncol=1)
y <- x %*% theta + rnorm(100)
df <- data.frame(y, x)
fit.bic <- bestBIC(y ~ ., data=df)
print(fit.bic)
fit.bic$models[1:5,]
summary(fit.bic)
coef(fit.bic)
priorCoef <- momprior()
priorDelta <- modelbbprior()
fit.bms <- modelSelection(y ~ ., data=df,
priorCoef=priorCoef,
priorDelta=priorDelta)
coef(fit.bms)
postProb(fit.bms)[1:5,]
ypred <- predict(fit.bms)
head(ypred)
dfbin <- transform(df, ybin = (y > 0)) |>
dplyr::select(!y)
library(mombf)
set.seed(1234)
x <- matrix(rnorm(100*3), nrow=100, ncol=3)
theta <- matrix(c(1,1,0), ncol=1)
y <- x %*% theta + rnorm(100)
df <- data.frame(y, x)
fit.bic <- bestBIC(y ~ ., data=df)
print(fit.bic)
fit.bic$models[1:5,]
summary(fit.bic)
coef(fit.bic)
priorCoef <- momprior()
priorDelta <- modelbbprior()
fit.bms <- modelSelection(y ~ ., data=df,
priorCoef=priorCoef,
priorDelta=priorDelta)
coef(fit.bms)
postProb(fit.bms)[1:5,]
ypred <- predict(fit.bms)
head(ypred)
dfbin <- transform(df, ybin = (y > 0)) |>
dplyr::select(!y) #drop variable y
fit2.bic <- bestBIC(ybin ~ ., family='binomial', data=dfbin)
print(fit2.bic)
library(mombf)
set.seed(1234)
x <- matrix(rnorm(100*3), nrow=100, ncol=3)
theta <- matrix(c(1,1,0), ncol=1)
y <- x %*% theta + rnorm(100)
df <- data.frame(y, x)
fit.bic <- bestBIC(y ~ ., data=df)
print(fit.bic)
fit.bic$models[1:5,]
summary(fit.bic)
coef(fit.bic)
priorCoef <- momprior()
priorDelta <- modelbbprior()
fit.bms <- modelSelection(y ~ ., data=df,
priorCoef=priorCoef,
priorDelta=priorDelta)
coef(fit.bms)
postProb(fit.bms)[1:5,]
ypred <- predict(fit.bms)
head(ypred)
dfbin <- transform(df, ybin = (y > 0)) |>
dplyr::select(!y) #drop variable y
fit2.bic <- bestBIC(ybin ~ ., family='binomial', data=dfbin)
print(fit2.bic)
fit2.bms <- modelSelection(ybin ~ ., data=dfbin,
priorCoef=priorCoef,
priorDelta=priorDelta,
family='binomial')
coef(fit2.bms)
library(mombf)
set.seed(1234)
x <- matrix(rnorm(100*3), nrow=100, ncol=3)
theta <- matrix(c(1,1,0), ncol=1)
y <- x %*% theta + rnorm(100)
df <- data.frame(y, x)
fit.bic <- bestBIC(y ~ ., data=df)
print(fit.bic)
fit.bic$models[1:5,]
summary(fit.bic)
coef(fit.bic)
priorCoef <- momprior()
priorDelta <- modelbbprior()
fit.bms <- modelSelection(y ~ ., data=df,
priorCoef=priorCoef,
priorDelta=priorDelta)
coef(fit.bms)
postProb(fit.bms)[1:5,]
ypred <- predict(fit.bms)
head(ypred)
dfbin <- transform(df, ybin = (y > 0)) |>
dplyr::select(!y) #drop variable y
fit2.bic <- bestBIC(ybin ~ ., family='binomial', data=dfbin)
print(fit2.bic)
fit2.bms <- modelSelection(ybin ~ ., data=dfbin,
priorCoef=priorCoef,
priorDelta=priorDelta,
family='binomial')
coef(fit2.bms)
fit.gam <- modelSelection(y ~ ., data=df,
smooth = ~ X1 + X2 + X3,
priorCoef=priorCoef,
priorDelta=priorDelta, verbose=FALSE)
set.seed(1234)
n <- 100
y <- rnorm(n)
df <- data.frame(y=y)
priorDelta <- modelunifprior()
priorCoef <- normalidprior(taustd=1)
ms <- modelSelection(y ~ 1, priorCoef=priorCoef, priorDelta=priorDelta, center=FALSE, verbose=FALSE)
priorDelta <- modelunifprior()
priorCoef <- normalidprior(taustd=1)
ms <- modelSelection(y ~ 1, data=df, priorCoef=priorCoef, priorDelta=priorDelta, center=FALSE, verbose=FALSE)
postProb(ms)
coef(ms)
y0 <- y - mean(y)
mu <- seq(0, .5, by=.05)
pp.yplus <- pval.yplus <- double(length(mu))
for (i in 1:length(mu)) {
dfplus <- transform(df, yplus= y0 + mu[i])
ms <- modelSelection(yplus ~ 1, data=dfplus, priorCoef=priorCoef, priorDelta=priorDelta, center=FALSE, verbose=FALSE)
pp.yplus[i] <- coef(ms)['(Intercept)', 'margpp']
pval.yplus[i] <- t.test(yplus)$p.value
}
set.seed(1234)
n <- 100
y <- rnorm(n)
df <- data.frame(y=y)
priorDelta <- modelunifprior()
priorCoef <- normalidprior(taustd=1)
ms <- modelSelection(y ~ 1, data=df, priorCoef=priorCoef, priorDelta=priorDelta, center=FALSE, verbose=FALSE)
postProb(ms)
coef(ms)
t.test(y)
y0 <- y - mean(y)
mu <- seq(0, .5, by=.05)
pp.yplus <- pval.yplus <- double(length(mu))
for (i in 1:length(mu)) {
dfplus <- transform(df, yplus= y0 + mu[i])
ms <- modelSelection(yplus ~ 1, data=dfplus, priorCoef=priorCoef, priorDelta=priorDelta, center=FALSE, verbose=FALSE)
pp.yplus[i] <- coef(ms)['(Intercept)', 'margpp']
pval.yplus[i] <- t.test(yplus)$p.value
}
i=1
dfplus <- transform(df, yplus= y0 + mu[i])
head(dfplus)
ms <- modelSelection(yplus ~ 1, data=dfplus, priorCoef=priorCoef, priorDelta=priorDelta, center=FALSE, verbose=FALSE)
y0 <- y - mean(y)
mu <- seq(0, .5, by=.05)
pp.yplus <- pval.yplus <- double(length(mu))
for (i in 1:length(mu)) {
dfplus <- transform(df, yplus= y0 + mu[i])
ms <- modelSelection(yplus ~ 1, data=dfplus, priorCoef=priorCoef, priorDelta=priorDelta, center=FALSE, verbose=FALSE)
pp.yplus[i] <- coef(ms)['(Intercept)', 'margpp']
pval.yplus[i] <- t.test(dfplus$yplus)$p.value
}
set.seed(1234)
n <- 100
y <- rnorm(n)
df <- data.frame(y=y)
priorDelta <- modelunifprior()
priorCoef <- normalidprior(taustd=1)
ms <- modelSelection(y ~ 1, data=df, priorCoef=priorCoef, priorDelta=priorDelta, center=FALSE, verbose=FALSE)
postProb(ms)
coef(ms)
t.test(y)
y0 <- y - mean(y)
mu <- seq(0, .5, by=.05)
pp.yplus <- pval.yplus <- double(length(mu))
for (i in 1:length(mu)) {
dfplus <- transform(df, yplus= y0 + mu[i])
ms <- modelSelection(yplus ~ 1, data=dfplus, priorCoef=priorCoef, priorDelta=priorDelta, center=FALSE, verbose=FALSE)
pp.yplus[i] <- coef(ms)['(Intercept)', 'margpp']
pval.yplus[i] <- t.test(dfplus$yplus)$p.value
}
plot(mu, pp.yplus, ylab='Posterior probability', xlab='Sample mean', ylim=c(0,1), type='l')
lines(mu, pval.yplus, col='blue')
abline(h= c(0.05, 0.95), lty=2, col=c('blue','black'))
legend('topleft', c("Posterior probability", "P-value"), lty=1, col=c("black","blue"))
p <- 2
models <- expand.grid(lapply(1:p, function(z) c(0,1)))
names(models) <- paste("gamma", 1:ncol(models), sep='')
priorp.unif <- rep(1/nrow(models), nrow(models))
l <- rowSums(models)
priorp.bb <- 1 / (choose(p, l) * (p+1))
priorsize.complex <- 1 / exp(0:p)
priorsize.complex <- priorsize.complex / sum(priorsize.complex)
priorp.complex <- priorsize.complex[l+1] / choose(p, l)
tab <- cbind(models, priorp.unif, priorp.bb, priorp.complex)
knitr::kable(
tab, booktabs = TRUE,
col.names= c(names(models)[1:p],'Uniform','Beta-Binomial','Complexity(1)'),
caption = paste('Model prior probabilities in a regression example with p=',p,' covariates',sep='')
)
p <- 4; n <- 50
x <- matrix(rnorm(n * p), nrow=n)
beta <- matrix(c(rep(0, 2), rep(0.5, p-2)), ncol=1)
y <- x %*% beta + rnorm(n)
df <- data.frame(y, x)
ms.unif <- modelSelection(y ~ -1 + ., data=df, priorDelta = modelunifprior(), verbose=FALSE)
ms.bbin <- modelSelection(y ~ -1 + ., data=df, priorDelta = modelbbprior(), verbose=FALSE)
ms.comp <- modelSelection(y ~ -1 + ., data=df, priorDelta = modelcomplexprior(), verbose=FALSE)
coef(ms.unif)
coef(ms.bbin)
coef(ms.comp)
y1 <- rnorm(n, mean=0.5)
gseq <- seq(0.001, 10^5, length=200)
pp0.gseq <- pp1.gseq <- double(length(gseq))
for (i in 1:length(gseq)) {
priorCoef <- normalidprior(taustd=gseq[i])
ms <- modelSelection(y ~ 1, priorCoef=priorCoef, priorDelta=priorDelta, center=FALSE, verbose=FALSE)
pp0.gseq[i] <- coef(ms)['(Intercept)', 'margpp']
ms1 <- modelSelection(y1 ~ 1, priorCoef=priorCoef, priorDelta=priorDelta, center=FALSE, verbose=FALSE)
pp1.gseq[i] <- coef(ms1)['(Intercept)', 'margpp']
}
df1 <- data.frame(y1= rnorm(n, mean=0.5))
head(df1)
df1 <- data.frame(y1= rnorm(n, mean=0.5))
gseq <- seq(0.001, 10^5, length=200)
pp0.gseq <- pp1.gseq <- double(length(gseq))
for (i in 1:length(gseq)) {
priorCoef <- normalidprior(taustd=gseq[i])
ms <- modelSelection(y ~ 1, data=df, priorCoef=priorCoef, priorDelta=priorDelta, center=FALSE, verbose=FALSE)
pp0.gseq[i] <- coef(ms)['(Intercept)', 'margpp']
ms1 <- modelSelection(y1 ~ 1, data=df1, priorCoef=priorCoef, priorDelta=priorDelta, center=FALSE, verbose=FALSE)
pp1.gseq[i] <- coef(ms1)['(Intercept)', 'margpp']
}
ms1 <- modelSelection(y1 ~ 1, data=df1, priorCoef=normalidprior(taustd=0.001), priorDelta=priorDelta, center=FALSE, verbose=FALSE)
coef(ms1)
ms1 <- modelSelection(y1 ~ 1, data=df1, priorCoef=normalidprior(taustd=10^6), priorDelta=priorDelta, center=FALSE, verbose=FALSE)
coef(ms1)
bookdown:::serve_book()
getwd()
bookdown::publish_book()
install.packages('rsconnect')
bookdown::publish_book()
args(publish_book)
?publish_book
publish_book(account= "rosselldavid@gmail.com")
library(bookdown)
publish_book(account= "rosselldavid@gmail.com")
bookdown::publish_book(account = "rosselldavid", server = "bookdown.org")
options(
bookdown.publish_account = "rosselldavid",
bookdown.publish_secret = "hoglBvFx0tGGUbeZU7q8dALi4bzCBlrH"
)
bookdown::publish_book()
